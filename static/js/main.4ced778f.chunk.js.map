{"version":3,"sources":["components/PrivateRoute.js","components/Users.js","components/Blogs.js","components/Home.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["PrivateRoute","Component","component","authedUser","rest","render","props","to","pathname","state","from","location","Users","className","console","log","users","map","user","key","id","name","withRouter","blogId","useParams","undefined","blogs","filter","blog","parseInt","sBlog","userId","title","body","onClick","history","push","handleClick","Home","useState","filtered","setFiltered","searchOption","setSearchOption","newBlogs","res","Object","assign","author","onChange","e","event","target","value","type","defaultChecked","setAuthedUser","newList","item","lc","toLowerCase","includes","handleChange","placeholder","Login","initialValues","email","password","onSubmit","values","setSubmitting","setTimeout","username","length","alert","validationSchema","Yup","shape","required","touched","errors","isSubmitting","handleBlur","handleSubmit","htmlFor","onBlur","disabled","App","setUsers","useEffect","fetch","then","results","json","setBlogs","exact","path","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4ced778f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom'\r\n\r\nexport default function PrivateRoute({ component: Component, authedUser, ...rest }) {\r\n    return (\r\n        <Route {...rest} render={(props) => (\r\n            authedUser !== null\r\n                ? <Component {...props} />\r\n                : <Redirect to={{\r\n                    pathname: '/login',\r\n                    state: { from: props.location }\r\n                }} />\r\n        )} />\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nfunction Users(props) {\r\n    return (<div className=\"users\">\r\n        {console.log(props.users)}\r\n        {props.users.map((user) => {\r\n            return (<div key={user.id}>{user.name}</div>);\r\n        })}\r\n    </div>);\r\n}\r\nexport default Users;","import React from 'react';\r\nimport { withRouter } from \"react-router\";\r\nimport { useParams } from 'react-router-dom';\r\nfunction Blogs(props) {\r\n    const handleClick = (blogId) => {\r\n        console.log(\"Blog Id\", blogId);\r\n        props.history.push(`/blogs/${blogId}`);\r\n    }\r\n    const handleBack = () => {\r\n        props.history.push(`/home`);\r\n    }\r\n    let { blogId } = useParams();\r\n    if (blogId !== undefined) {\r\n        return (<div>\r\n            <h1>Blog</h1>\r\n            {props.blogs.filter((blog) => blog.id === parseInt(blogId)).map((sBlog) => {\r\n                return (<div key={sBlog.id} >\r\n                    <dl className=\"singleblog\">\r\n                        <dt>Id</dt>\r\n                        <dd>{sBlog.id}</dd>\r\n                        <dt>Customer Id</dt>\r\n                        <dd>{sBlog.userId}</dd>\r\n                        <dt>Title</dt>\r\n                        <dd>{sBlog.title}</dd>\r\n                        <dt>Description</dt>\r\n                        <dd>{sBlog.body}</dd>\r\n                    </dl>\r\n                </div>);\r\n            })}\r\n            <button onClick={() => handleBack()}>Back</button>\r\n        </div>);\r\n    }\r\n    else {\r\n        return (<div className=\"blogs\">\r\n            {props.blogs.map((blog) => {\r\n                return (<div key={blog.id}>\r\n                    <button className=\"blogbtn\" onClick={() => handleClick(blog.id)}>{blog.title}</button>\r\n                </div>);\r\n            })}\r\n        </div>);\r\n    }\r\n}\r\nexport default withRouter(Blogs);","import React, { useState } from 'react';\r\nimport Users from './Users';\r\nimport Blogs from './Blogs';\r\nfunction Home(props) {\r\n    const [filtered, setFiltered] = useState(props.users);\r\n    const [searchOption, setSearchOption] = useState('user');\r\n    const handleChange = (e) => {\r\n        // Variable to hold the original version of the list\r\n        let currentList = [];\r\n        // Variable to hold the filtered list before putting into state\r\n        let newList = [];\r\n\r\n        // If the search bar isn't empty\r\n        if (e.target.value !== \"\") {\r\n            if (searchOption === 'user')\r\n                currentList = props.users;\r\n            else if (searchOption === 'title')\r\n                currentList = props.blogs;\r\n            else\r\n                currentList = newBlogs;\r\n            newList = currentList.filter(item => {\r\n                let lc = '';\r\n                if (searchOption === 'user')\r\n                    lc = item.name.toLowerCase();\r\n                else if (searchOption === 'title')\r\n                    lc = item.title.toLowerCase();\r\n                else {\r\n                    lc = item.author.toLowerCase();\r\n                }\r\n\r\n                const filter = e.target.value.toLowerCase();\r\n\r\n                return lc.includes(filter);\r\n            });\r\n        } else {\r\n            // If the search bar is empty, set newList to original task list\r\n            newList = filtered;\r\n        }\r\n        // Set the filtered state based on what our rules added to newList\r\n        setFiltered(newList);\r\n    }\r\n    const setSearch = (event) => {\r\n        console.log(event.target.value);\r\n        if (event.target.value === 'user') {\r\n            setFiltered(props.users);\r\n            setSearchOption('user');\r\n        }\r\n        else {\r\n            setFiltered(props.blogs);\r\n            if (event.target.value === 'author') {\r\n                setSearchOption('author');\r\n            }\r\n            else {\r\n                setSearchOption('title');\r\n            }\r\n        }\r\n    }\r\n    let newBlogs = props.blogs.map((blog) => {\r\n        const res = props.users.filter((user) => (user.id === blog.userId))\r\n        return Object.assign({}, blog, { author: res[0].name })\r\n    })\r\n    const handleLogout = () => {\r\n        props.setAuthedUser(null);\r\n    }\r\n    return (<div>\r\n        <h1> Users/Blogs</h1>\r\n        {console.log(\"filtered\", filtered)}\r\n        <div className=\"search\" onChange={(e) => setSearch(e)}>\r\n            <input type=\"radio\" value=\"user\" name=\"gender\" defaultChecked=\"checked\" /> User Name\r\n            <input type=\"radio\" value=\"author\" name=\"gender\" /> Blog Author\r\n            <input type=\"radio\" value=\"title\" name=\"gender\" /> Blog Title\r\n            <button onClick={() => handleLogout()}>Logout</button>\r\n        </div>\r\n        <input type=\"text\" className=\"sinput\" onChange={(e) => handleChange(e)} placeholder=\"Search...\" />\r\n        <div className=\"usersblogs\">\r\n            <Users users={searchOption === 'user' ? filtered : props.users} />\r\n            <Blogs blogs={(searchOption === 'title' || searchOption === 'author') ? filtered : props.blogs} />\r\n        </div>\r\n    </div>);\r\n}\r\nexport default Home;\r\n\r\n","import React from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nconst Login = (props) => (\r\n    <Formik\r\n        initialValues={{ email: \"\", password: \"\" }}\r\n        onSubmit={(values, { setSubmitting }) => {\r\n            setTimeout(() => {\r\n                const user = props.users.filter((user) => user.username === values.password && user.email === values.email);\r\n                if (user.length !== 0) {\r\n                    props.setAuthedUser(props.password);\r\n                    props.history.push('/home');\r\n                    setSubmitting(false);\r\n                } else {\r\n                    alert(\"Email id / password are wrong\");\r\n                    props.history.push('/');\r\n                }\r\n            }, 500);\r\n        }}\r\n\r\n        validationSchema={Yup.object().shape({\r\n            email: Yup.string()\r\n                .email()\r\n                .required(\"Required\"),\r\n            password: Yup.string()\r\n                .required(\"No password provided.\")\r\n        })}\r\n    >\r\n        {props => {\r\n            const {\r\n                values,\r\n                touched,\r\n                errors,\r\n                isSubmitting,\r\n                handleChange,\r\n                handleBlur,\r\n                handleSubmit\r\n            } = props;\r\n            return (\r\n                <form onSubmit={handleSubmit}>\r\n                    <h1>Please Login</h1>\r\n                    <label htmlFor=\"email\">Email</label>\r\n                    <input\r\n                        name=\"email\"\r\n                        type=\"text\"\r\n                        placeholder=\"Enter your email\"\r\n                        value={values.email}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        className={errors.email && touched.email && \"error\"}\r\n                    />\r\n                    {errors.email && touched.email && (\r\n                        <div className=\"input-feedback\">{errors.email}</div>\r\n                    )}\r\n                    <label htmlFor=\"email\">Password</label>\r\n                    <input\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        placeholder=\"Enter your password\"\r\n                        value={values.password}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        className={errors.password && touched.password && \"error\"}\r\n                    />\r\n                    {errors.password && touched.password && (\r\n                        <div className=\"input-feedback\">{errors.password}</div>\r\n                    )}\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Login\r\n                    </button>\r\n                </form>\r\n            );\r\n        }}\r\n    </Formik>\r\n);\r\n\r\nexport default Login;","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport PrivateRoute from './components/PrivateRoute';\nimport Home from './components/Home';\nimport Login from './components/Login';\nimport Users from './components/Users';\nimport Blogs from './components/Blogs';\nimport './App.css';\n\nfunction App() {\n  const [authedUser, setAuthedUser] = useState(null);\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(results => results.json())\n      .then(users => {\n        setUsers(users);\n      });\n  }, []); // <-- Have to pass in [] here!\n  const [blogs, setBlogs] = useState([]);\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/posts')\n      .then(results => results.json())\n      .then(blogs => {\n        setBlogs(blogs);\n      });\n  }, []); // <-- Have to pass in [] here!\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/test\" component={(props) => <Login setAuthedUser={setAuthedUser} users={users} {...props} />} />\n          <Route exact path=\"/login\" component={(props) => <Login setAuthedUser={setAuthedUser} users={users} {...props} />} />\n          <PrivateRoute exact path='/home' authedUser={authedUser} component={(props) => <Home setAuthedUser={setAuthedUser} users={users} blogs={blogs} {...props} />} />\n          <PrivateRoute exact path=\"/users\" authedUser={authedUser} component={(props) => <Users {...props} />} />\n          <PrivateRoute exact path=\"/blogs\" authedUser={authedUser} component={(props) => <Blogs  {...props} />} />\n          <PrivateRoute exact path=\"/blogs/:blogId\" authedUser={authedUser} component={(props) => <Blogs blogs={blogs} {...props} />} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}